library(tidyverse)

master$kcode <- NA
master$kcode <- ifelse((master$skill %in% c("Reception", "Dig", "Freeball") & !is.na(lead(master$set_code))) | (master$skill == "Set" & !is.na(master$set_code)), "yes", "no")

test <- subset(master, gender == "Women")
test <- test[order(test$id_master),] 

'%!in%' <- function(x,y)!('%in%'(x,y))

test <- test %>%
  mutate(
    tier = case_when(
      rpi <= 50 ~  "tier1",
      rpi > 50 & rpi <=150 ~  "tier2",
      rpi > 150 & rpi <= 225 ~ "tier3",
      rpi > 225 ~  "tier4"
    ),
    tier_opp = case_when(
      rpi_opp <= 50 ~  "tier1",
      rpi_opp > 50 & rpi_opp <=150 ~  "tier2",
      rpi_opp > 150 & rpi_opp <= 225 ~ "tier3",
      rpi_opp > 225 ~  "tier4"
    )
  )

test <- test %>% 
  filter(!is.na(rpi) & !is.na(rpi_opp))

test <- test[order(test$id_master),] 

test <- test %>% 
  mutate(input_type = 
           case_when(
             skill == "Serve" ~ "serve_baseline",
             skill == "Reception" ~ "reception_baseline",
             skill == "Set" ~ "set_regular",
             skill == "Attack" & lag(team) != team ~ "attack_overpass",
             skill == "Attack" & lag(team) == team & lag(skill) == "Set" ~ "attack_regular",
             skill == "Attack" & lag(team) == team & lag(skill) != "Set" ~ "attack_weird",
             skill == "Attack" & lag(team) == team & lag(skq) == "Set -" ~ "attack_poor_set",
             skill == "Block" & lag(team,2) == team & lag(team) != team & lag(skill) == "Attack" ~ "block_overpass",
             skill == "Block" & lag(team) != team & lag(skill) == "Attack" ~  "block_regular",
             skill == "Block" & lag(team) != team & lag(skill) != "Attack" ~  "block_weird",
             skill == "Dig" & lag(skill) == "Attack" & lag(team)==lag(team,2) ~  "dig_regular",
             skill == "Dig" & lag(skill) == "Attack" & lag(team)!=lag(team,2) ~  "dig_overpass",
             add_cover == "Dig" & lag(skill) == "Block" & lag(team) == team ~ "dig_blocktouch",
             add_cover == "Cover" & lag(skill) == "Block" & lag(team) != team ~ "cover_blocktouch",
             skill == "Dig" & lag(skill) != "Block" & lag(skill) != "Attack" ~  "dig_weird",
             skill == "Freeball" ~ "freeball_baseline"
           )
         ,
         output_type = 
           case_when(
             skq == "Serve #" ~ "serve_ace",
             skq == "Serve =" ~ "serve_error",
             skill == "Serve" & evaluation_code %!in% c("#", "=") & lead(team,2) != team ~ "serve_regular",
             skill == "Serve" & evaluation_code %!in% c("#", "=") & lead(team,2) == team & lead(skill,2) == "Attack" ~ "serve_overpass_attack",
             skill == "Serve" & evaluation_code %!in% c("#", "=") & lead(team,2) == team & lead(skill,2) != "Attack" ~ "serve_overpass_non_attack",
             skq == "Reception =" ~ "reception_error",
             skill == "Reception" & evaluation_code != "=" & lead(team) == team ~ "reception_regular",
             skill == "Reception" & evaluation_code != "=" & lead(team) != team & lead(skill) == "Attack" ~ "reception_overpass_attack",
             skill == "Reception" & evaluation_code != "=" & lead(team) != team & lead(skill) != "Attack" ~ "reception_overpass_non_attack",
             skq == "Set =" ~ "set_error",
             skq == "Set -" ~ "set_poor",
             skq == "Set #" ~ "set_regular",
             skq == "Attack #" ~ "attack_kill",
             skq == "Attack =" ~ "attack_error",
             skq == "Attack /" ~ "attack_blocked",
             skill == "Attack" & evaluation_code %!in% c("#", "=", "/") & lead(skill) == "Block" & lead(team,2) == team ~ "attack_covered",
             skill == "Attack" & evaluation_code %!in% c("#", "=", "/") & lead(skill) == "Block" & lead(team,2) == team & lead(team,3) != team ~ "attack_covered_overpass",
             skill == "Attack" & evaluation_code %!in% c("#", "=", "/") & lead(skill) == "Block" & lead(team,2) != team & lead(team,3) != team ~ "attack_regular_block",
             skill == "Attack" & evaluation_code %!in% c("#", "=", "/") & lead(skill) != "Block" & lead(team) != team & lead(team,2) != team ~ "attack_regular",
             skill == "Attack" & evaluation_code %!in% c("#", "=", "/") & lead(skill) == "Block" & lead(team,2) != team & lead(team,3) == team & lead(skill,3) == "Attack" ~ "attack_block_into_overpass_attack",
             skill == "Attack" & evaluation_code %!in% c("#", "=", "/") & lead(skill) == "Block" & lead(team,2) != team & lead(team,3) == team & lead(skill,3) != "Attack" ~ "attack_block_into_overpass_non_attack",
             skill == "Attack" & evaluation_code %!in% c("#", "=", "/") & lead(skill) != "Block" & lead(team) != team & lead(team,2) == team & lead(skill,2) == "Attack" ~ "attack_into_overpass_attack",
             skill == "Attack" & evaluation_code %!in% c("#", "=", "/") & lead(skill) != "Block" & lead(team) != team & lead(team,2) == team & lead(skill,2) != "Attack" ~ "attack_into_overpass_non_attack",
             skill == "Attack" & lead(team) == team & lead(point_id) == point_id ~ "attack_incorrect_tagging",
             skq == "Block #" ~ "block_stuff",
             skq == "Block =" ~ "block_out",
             skq == "Block !" ~ "block_into_dig_error",
             skill == "Block" & evaluation_code %!in% c("#", "=", "!") & lead(team) == team ~ "block_regular",
             skill == "Block" & evaluation_code %!in% c("#", "=", "!") & lead(team) != team ~ "block_covered",
             skq == "Dig =" ~ "dig_error",
             skq == "Cover =" ~ "cover_error",
             skill == "Dig" & evaluation_code != "=" & lead(team) == team ~ "dig_regular",
             skill == "Dig" & evaluation_code != "=" & lead(team) != team & lead(skill) == "Attack" ~ "dig_overpass_attack",
             skill == "Dig" & evaluation_code != "=" & lead(team) != team & lead(skill) != "Attack" ~ "dig_overpass_non_attack",
             skq == "Freeball =" ~ "freeball_error",
             skill == "Freeball" & evaluation_code != "=" & lead(team) == team ~ "freeball_regular",
             skill == "Freeball" & evaluation_code != "=" & lead(team) != team & lead(skill) == "Attack" ~ "freeball_overpass_attack",
             skill == "Freeball" & evaluation_code != "=" & lead(team) != team & lead(skill) != "Attack" ~ "freeball_overpass_non_attack"
           )
        )

test <- test[order(test$id_master),] 

test <- test %>% 
  mutate(
    input_coord_x = 
      case_when(
        input_type == "set_regular" ~ start_coordinate_x,
        input_type == "attack_regular" ~ lag(start_coordinate_x),
        input_type == "block_regular" ~ lag(start_coordinate_x,2)
      ),
    input_coord_y =
      case_when(
        input_type == "set_regular" ~ start_coordinate_y,
        input_type == "attack_regular" ~ lag(start_coordinate_y),
        input_type == "block_regular" ~ lag(start_coordinate_y,2)
      ),
    input_kcode = 
      case_when(
        input_type == "set_regular" ~ kcode,
        input_type == "attack_regular" ~ lag(kcode),
        input_type == "block_regular" ~ lag(kcode,2)
      )
  )

test <- test[order(test$id_master),] 

test <- test %>% 
  mutate(
    output_coord_x = 
      case_when(
        output_type == "serve_regular" ~ lead(start_coordinate_x,2),
        output_type == "serve_overpass_non_attack" ~ lead(start_coordinate_x,3),
        output_type == "reception_regular" ~ lead(start_coordinate_x),
        output_type == "reception_overpass_non_attack" ~ lead(start_coordinate_x,2),
        output_type == "attack_covered" ~ lead(start_coordinate_x,2),
        output_type == "attack_regular" ~ lead(start_coordinate_x,2),
        output_type == "attack_regular_block" ~ lead(start_coordinate_x,3),
        output_type == "attack_into_overpass_non_attack" ~ lead(start_coordinate_x,3),
        output_type == "attack_block_into_overpass_non_attack" ~ lead(start_coordinate_x,4),
        output_type == "attack_incorrect_tagging" ~ lead(start_coordinate_x,2),
        output_type == "block_regular" ~ lead(start_coordinate_x,2),
        output_type == "block_covered" ~ lead(start_coordinate_x,2),
        output_type == "dig_regular" ~ lead(start_coordinate_x),
        output_type == "dig_overpass_non_attack" ~ lead(start_coordinate_x,2),
        output_type == "freeball_regular" ~ lead(start_coordinate_x),
        output_type == "freeball_overpass_non_attack" ~ lead(start_coordinate_x,2)
      ),
    output_coord_y =
      case_when(
        output_type == "serve_regular" ~ lead(start_coordinate_y,2),
        output_type == "serve_overpass_non_attack" ~ lead(start_coordinate_y,3),
        output_type == "reception_regular" ~ lead(start_coordinate_y),
        output_type == "reception_overpass_non_attack" ~ lead(start_coordinate_y,2),
        output_type == "attack_covered" ~ lead(start_coordinate_y,2),
        output_type == "attack_regular" ~ lead(start_coordinate_y,2),
        output_type == "attack_regular_block" ~ lead(start_coordinate_y,3),
        output_type == "attack_into_overpass_non_attack" ~ lead(start_coordinate_y,3),
        output_type == "attack_block_into_overpass_non_attack" ~ lead(start_coordinate_y,4),
        output_type == "attack_incorrect_tagging" ~ lead(start_coordinate_y,2),
        output_type == "block_regular" ~ lead(start_coordinate_y,2),
        output_type == "block_covered" ~ lead(start_coordinate_y,2),
        output_type == "dig_regular" ~ lead(start_coordinate_y),
        output_type == "dig_overpass_non_attack" ~ lead(start_coordinate_y,2),
        output_type == "freeball_regular" ~ lead(start_coordinate_y),
        output_type == "freeball_overpass_non_attack" ~ lead(start_coordinate_y,2)
      ),
    output_kcode = 
      case_when(
        output_type == "serve_regular" ~ lead(kcode,2),
        output_type == "serve_overpass_non_attack" ~ lead(kcode,3),
        output_type == "reception_regular" ~ lead(kcode),
        output_type == "reception_overpass_non_attack" ~ lead(kcode,2),
        output_type == "attack_covered" ~ lead(kcode,2),
        output_type == "attack_regular" ~ lead(kcode,2),
        output_type == "attack_regular_block" ~ lead(kcode,3),
        output_type == "attack_into_overpass_non_attack" ~ lead(kcode,3),
        output_type == "attack_block_into_overpass_non_attack" ~ lead(kcode,4),
        output_type == "attack_incorrect_tagging" ~ lead(kcode,2),
        output_type == "block_regular" ~ lead(kcode,2),
        output_type == "block_covered" ~ lead(kcode,2),
        output_type == "dig_regular" ~ lead(kcode),
        output_type == "dig_overpass_non_attack" ~ lead(kcode,2),
        output_type == "freeball_regular" ~ lead(kcode),
        output_type == "freeball_overpass_non_attack" ~ lead(kcode,2)
      )
  )

test$output_coord_x <- ifelse(test$input_type == "set_regular", test$input_coord_x, test$output_coord_x)
test$output_coord_y <- ifelse(test$input_type == "set_regular", test$input_coord_y, test$output_coord_y)
test$output_kcode <- ifelse(test$input_type == "set_regular", test$input_kcode, test$output_kcode)

test <- test %>% 
  mutate(blockers =
    case_when(
      num_players == "1 player block" ~ "solo",
      num_players == "2 player block" ~ "double",
      num_players == "3 player block" ~ "triple",
      num_players == "Hole block" ~ "seam",
      num_players == "No block" ~ "none",
      num_players == "Unexpected +" ~ "solo"
    )
  )
test <- test[order(test$id_master),] 
test$blockers <- ifelse(test$skq == "Set #" & lead(test$skill)=="Attack", lead(test$blockers), test$blockers)

a <- subset(test, skq=="Set #" & is.na(blockers) & input_kcode=="yes")
b <- subset(test, skq=="Set #" & is.na(blockers) & input_kcode=="no")
c <- subset(test, skq!="Set #" | !is.na(blockers))
a$blockers <- sample(c("double", "solo", "seam", "none", "triple"), size = nrow(a), replace = TRUE, prob = c(0.48,0.23,0.224,0.016,0.007))
b$blockers <- sample(c("double", "solo", "seam", "none", "triple"), size = nrow(b), replace = TRUE, prob = c(0.724,0.097,0.063,0.075,0.012))
test <- rbind(a,b,c)
test <- test[order(test$id_master),] 


input_aggregates <- aggregate(rally_eff ~ input_type*tier*tier_opp, subset(test, input_type %in% c("serve_baseline", 
                                                                                                   "attack_overpass",
                                                                                                   "attack_weird",
                                                                                                   "attack_poor_set",
                                                                                                   "block_weird",
                                                                                                   "dig_overpass",
                                                                                                   "dig_weird",
                                                                                                   "freeball_baseline")), mean)

output_aggregates <- aggregate(rally_eff ~ output_type*tier*tier_opp, subset(test, output_type %in% c("set_poor",
                                                                                                      "serve_ace",
                                                                                                      "serve_error",
                                                                                                      "reception_error",
                                                                                                      "set_error",
                                                                                                      "attack_kill",
                                                                                                      "attack_error",
                                                                                                      "attack_blocked",
                                                                                                      "block_stuff",
                                                                                                      "block_out",
                                                                                                      "block_into_dig_error",
                                                                                                      "dig_error",
                                                                                                      "cover_error",
                                                                                                      "freeball_error")), mean)

output_aggregates$rally_eff <- ifelse(output_aggregates$output_type %in% c("serve_ace","attack_kill","block_stuff"), 1.0, output_aggregates$rally_eff)
output_aggregates$rally_eff <- ifelse(output_aggregates$output_type %in% 
                                        c("serve_error","reception_error","set_error","attack_error","attack_blocked","block_out","block_into_dig_error","dig_error","cover_error","freeball_error"),
                                      -1.0, output_aggregates$rally_eff)

colnames(input_aggregates)[4] <- "eV_input"
colnames(output_aggregates)[4] <- "eV_output"

a <- subset(input_aggregates, input_type == "serve_baseline")
a$input_type <- "reception_baseline"
colnames(a) <- c("input_type", "tier_opp", "tier", "eV_input")
a$eV_input <- a$eV_input * -1
input_aggregates <- rbind(input_aggregates, a)

a <- subset(input_aggregates, input_type == "attack_overpass")
a$input_type <- "block_overpass"
colnames(a) <- c("input_type", "tier_opp", "tier", "eV_input")
a$eV_input <- a$eV_input * -1
input_aggregates <- rbind(input_aggregates, a)

good <- subset(input_aggregates, input_type == "attack_overpass")
colnames(good)[1] <- "output_type"
colnames(good)[4] <- "eV_output"

a <- good
a$output_type <- "serve_overpass_attack"

bad <- good
colnames(bad) <- c("output_type", "tier_opp", "tier", "eV_output")
bad$eV_output <- bad$eV_output * -1

b <- bad
b$output_type <- "reception_overpass_attack"

c <- b
c$output_type <- "dig_overpass_attack"

d <- b
d$output_type <- "freeball_overpass_attack"

e <- good
e$output_type <- "attack_block_into_overpass_attack"

f <- good
f$output_type <- "attack_into_overpass_attack"

output_aggregates <- rbind(output_aggregates, a, b, c, d, e, f)
colnames(output_aggregates)[4] <- "eV_output"

# combine aggregate & merge with dataframe
allskill <- merge(input_aggregates, output_aggregates, by = c("tier", "tier_opp"))
test$eV_input <- NULL
test$eV_output <- NULL
test <- merge(test, allskill, by = c("input_type", "output_type", "tier", "tier_opp"), all.x = TRUE)
test <- test[order(test$id_master),]

# more specific aggregate for Dig after Block Touch
test$speed <- NA
test$speed <- ifelse(test$skill=="Dig" & lag(test$skill=="Block") & lag(test$skill_subtype,2)=="Hard spike", "hard_spike", test$speed)
test$speed <- ifelse(test$skill=="Dig" & lag(test$skill=="Block") & (lag(test$skill_subtype,2)!="Hard spike" | is.na(lag(test$skill_subtype,2))), "not_hard_spike", test$speed)

test$block_time <- NA
test$block_time <- ifelse(test$skill=="Dig" & lag(test$skill=="Block"), test$video_time - lag(test$video_time), test$block_time)
test$block_time <- ifelse(test$block_time >= 2, "2+", test$block_time)

block_touch_stuff <- aggregate(rally_eff ~ add_cover*speed*block_time*tier*tier_opp, subset(test, skill=="Dig"), mean)
colnames(block_touch_stuff)[6] <- "eV_input"


a <- subset(test, skill=="Dig" & lag(skill=="Block"))
a <- merge(a, block_touch_stuff, all.x = TRUE)
b <- subset(test, skill!="Dig" | (skill=="Dig" & lag(skill!="Block")))

# fit - input / output
a <- subset(test, skq == "Set #" & !is.na(input_coord_x))

fit_input <- lm(rally_eff ~ poly(input_coord_x,2) + poly(input_coord_y,2) + tier + tier_opp + input_kcode, a)
summary(fit_input)

fit_output <- lm(rally_eff ~ poly(output_coord_x,2) + poly(output_coord_y,2) + tier + tier_opp + output_kcode, a)
summary(fit_output)

fit_set_output <- lm(rally_eff ~ poly(input_coord_x,2) + poly(input_coord_y,2) + tier + tier_opp + input_kcode + blockers, a)
summary(fit_set_output)


# FIT ALL OF THE FITS!

test$eV_input <- NULL
test$eV_output <- NULL
test$eV_added <- NULL

a <- subset(test, !is.na(input_coord_x) | !is.na(output_coord_x))
b <- subset(test, is.na(input_coord_x) & is.na(output_coord_x))
b$eV_input <- NA
b$eV_output <- NA
a$eV_input <- predict(fit_input, newdata = a)
a$eV_output <- predict(fit_output, newdata = a)
test <- rbind(a,b)
test <- test[order(test$id_master),]
rm(a,b)

a <- subset(test, !is.na(eV_input))
b <- subset(test, is.na(eV_input))
b$eV_input <- NULL
b <- merge(b, input_aggregates, all.x = TRUE)
test <- rbind(a,b)
test <- test[order(test$id_master),]
rm(a,b)

a <- subset(test, !is.na(eV_output))
b <- subset(test, is.na(eV_output))
b$eV_output <- NULL
b <- merge(b, output_aggregates, all.x = TRUE)
test <- rbind(a,b)
test <- test[order(test$id_master),]
rm(a,b)

test$eV_input <- ifelse(is.na(test$eV_input) & test$input_type=="dig_regular" & lag(test$input_type)=="attack_regular", test$eV_input * -1, test$eV_input)

a <- subset(test, is.na(input_type) | (input_type!="dig_blocktouch" & input_type!="cover_blocktouch"))
b <- subset(test, input_type=="dig_blocktouch" | input_type=="cover_blocktouch")
b$eV_input <- NULL
b <- merge(b, block_touch_stuff, all.x = TRUE)
test <- rbind(a,b)
test <- test[order(test$id_master),]
rm(a,b)

a <- subset(test, skq=="Set #" & !is.na(input_coord_x))
b <- subset(test, skq!="Set #" | is.na(input_coord_x))
a$eV_output <- predict(fit_set_output, newdata = a)
test <- rbind(a,b)
test <- test[order(test$id_master),]
rm(a,b)

test$eV_input <- ifelse(test$skill=="Attack" & lag(test$skq)=="Set #" & lag(test$team)==test$team, lag(test$eV_output), test$eV_input)
test$eV_input <- ifelse(test$input_type=="dig_regular" & lag(test$skq, 2)=="Set #" & lag(test$team,2)!=test$team, lag(test$eV_output, 2) * -1, test$eV_input)
test$eV_input <- ifelse(test$skill=="Dig" & lag(test$skq, 2)=="Set -" & lag(test$team,2)!=test$team & lag(test$skill)!="Block", lag(test$eV_output, 2) * -1, test$eV_input)
test$eV_input <- ifelse(test$skill=="Dig" & lag(test$skill)!="Block" & lag(test$input_type)=="attack_overpass" & lag(test$team)!=test$team, lag(test$eV_output) * -1, test$eV_input)
test$eV_input <- ifelse(test$input_type=="dig_overpass" & lag(test$input_type=="attack_overpass"), lag(test$eV_input) * -1, test$eV_input)
test$eV_input <- ifelse(test$skill=="Dig" & lag(test$skill=="Attack"), lag(test$eV_input) * -1, test$eV_input)


# working on stuff vvv (Wednesday February 10)
# dig after the block is the key. use the input for the dig_blocktouch as the output for the block_regular & the output of the attack_regular_block

test$eV_input <- ifelse(test$skill=="Dig" & test$input_type=="dig_regular" & lag(test$input_type=="attack_regular"), lag(test$eV_input) * -1, test$eV_input)
test$eV_input <- ifelse(test$skill=="Block" & test$input_type=="block_regular" & lead(test$input_type=="dig_blocktouch"), lead(test$eV_input), test$eV_input)
test$eV_input <- ifelse(test$skill=="Block" & test$input_type=="block_regular" & lag(test$output_type=="attack_regular_block"), lag(test$eV_input) * -1, test$eV_input)
test$eV_output <- ifelse(test$skill=="Block" & test$output_type=="block_regular" & lag(test$output_type=="attack_regular_block"), lag(test$eV_output) * -1, test$eV_output)



broken_input <- subset(test, is.na(eV_input))
broken_output <- subset(test, is.na(eV_output))
table(broken_input$input_type)
table(broken_input$output_type)


test$input_type <- ifelse(is.na(test$input_type), "unspecified!!", test$input_type)
test$output_type <- ifelse(is.na(test$output_type), "unspecified!!", test$output_type)
test$eV_input <- ifelse(is.na(test$eV_input), 0.5, test$eV_input)
test$eV_output <- ifelse(is.na(test$eV_output), 0.5, test$eV_output)
test$eV_added <- test$eV_output - test$eV_input

test <- test %>% relocate(eV_input, eV_output, eV_added, skq, input_type, output_type, two_touch_ago, one_touch_ago, one_touch_future, two_touch_future, tier, tier_opp, input_kcode, output_kcode, blockers, speed, block_time)









